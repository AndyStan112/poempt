/* eslint-disable jsx-a11y/alt-text */
/* eslint-disable @next/next/no-img-element */
import { useState } from "react";
import BookmarkButton from "./buttons/bookmarkbutton";
import RegenerateButton from "./buttons/regeneratebutton";
import DownloadButton from "./buttons/downloadbutton";
import RemoveButton from "./buttons/removebutton";
import ShareButton from "./buttons/sharebutton";

function LibraryCard(props: {
  title: string;
  text: string;
  bookmark: boolean | undefined;
  userName?: string;
  userImage?: string;
  poemId?: string;
  sessionId?: string;
  poemImage: string;
  bookmarkId?: string;
  creatorId?: string;
}) {
  // console.log(props.poemId);
  const [bookmarked, setBookmarked] = useState(true);
  const [removed, setRemoved] = useState(false);
  const [image, setImage] = useState(props.poemImage);
  // console.log(removed);

  const remove = async () => {
    console.log(props);
    if (!props.sessionId || !bookmarked) return;
    setBookmarked(true);
    await fetch("/api/bookmarks/delete/" + props.bookmarkId, {
      method: "delete",
      headers: {
        "content-type": "application/json",
      },
    })
      .then(() => setRemoved(true))
      .catch((e) => {
        setRemoved(false);
        console.log(e);
      });
  };

  // console.log(props);
  return (
    <>
      <div className="flex h-full p-4 mb-4 flex-col gap-4 md:flex-row rounded-xl border border-gray-200 bg-white shadow-md dark:border-gray-700 dark:bg-gray-800 mx-auto w-full md:w-0 md:min-w-librarycard">
        <div className="flex-1 text-center md:text-left">
          <h5 className="text-2xl font-bold tracking-tight text-gray-900 mb-3">
            {props.title}
          </h5>
          <p className="font-normal text-gray-700 whitespace-pre-wrap">
            {props.text}
          </p>
        </div>
        <div className="flex flex-0 flex-col w-[256px] gap-3 justify-center md:justify-start items-center md:items-end text-gray-300 text-sm">
          <img
            src={image ? image : "loader.gif"}
            alt={props.title}
            className="w-[256px] h-[256px] rounded-md shadow-md"
          />
          <div className="flex-1 w-full flex-col items-center">
            <div className="flex flex-row justify-center gap-2 w-full">
              {props.creatorId &&
                props.sessionId &&
                props.creatorId === props.sessionId && (
                  <RegenerateButton
                    sessionId={props.sessionId}
                    poem={props.text}
                    setImage={setImage}
                    poemId={props.poemId!}
                  ></RegenerateButton>
                )}
              {!props.bookmark ? (
                <BookmarkButton
                  poemId={props.poemId!}
                  bookmarked={bookmarked}
                  setBookmarked={setBookmarked}
                  sessionId={props.sessionId!}
                  buttonType="normal"
                ></BookmarkButton>
              ) : (
                <RemoveButton removed={removed} remove={remove} />
              )}
              <DownloadButton imageUrl={props.poemImage}></DownloadButton>
              <ShareButton
                poemId={props.poemId || "A poem"}
                poemTitle={props.title}
              ></ShareButton>
            </div>
          </div>
          <div>
            {props.userName && (
              <div className="flex flex-row gap-2">
                <div className="text-right">
                  <div className="text-sm text-gray-300">Generated by</div>
                  <div className="text-md text-gray-400">{props.userName}</div>
                </div>
                <img
                  className="w-10 h-10 rounded-full border-gray-100 border-2"
                  src={props.userImage ? props.userImage : "generic_user.png"}
                />
              </div>
            )}
            <p className="text-right">
              Made with <span className="text-lg text-gray-400">PoemPT</span>
            </p>
          </div>
        </div>
      </div>
    </>
  );
}

export default LibraryCard;
